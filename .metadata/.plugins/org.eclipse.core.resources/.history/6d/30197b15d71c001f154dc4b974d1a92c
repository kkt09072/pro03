package com.morning.ctrl;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.morning.biz.FileboardService;
import com.morning.domain.Fileboard;
import com.morning.util.PagingBean;

@Controller
@RequestMapping("/fileboard/")
public class FileboardController {

	private static final Logger log = LoggerFactory.getLogger(FileboardController.class);
	
	@Autowired
	private FileboardService fileboardService;
	
	@Autowired
	private ServletContext servletContext;

	@Autowired
	private HttpSession session;
	
	@RequestMapping("list.do")
	public String getBoardList(@RequestParam("pageNo") String pageNo, Model model) {
		int cnt = fileboardService.getTotalCount();
		PagingBean pagingBean = new PagingBean(cnt);
		
		int totalPage = pagingBean.getTotalPage();
		
		float pageCnt = cnt / 5.0f;
		
		model.addAttribute("totalPage", totalPage);
		List<Fileboard> fileboardList = fileboardService.getPostList(pageNo);
		model.addAttribute("list", fileboardList);
		model.addAttribute("pageNo", pageNo);
		
		for(Fileboard file : fileboardList) {
			log.info(file.toString());
		}
		
		return "fileboard/list";
	}
	
	@RequestMapping("detail.do")
	public String getBoard(@RequestParam("no") int no, HttpServletRequest req, Model model) {
		
		String id = (String) session.getAttribute("sid");
		
		Cookie viewCookie=null;
		Cookie[] cookies = req.getCookies();
		
		if(cookies !=null) {
			for (int i = 0; i < cookies.length; i++) {
				if(cookies[i].getName().equals("|"+id+"|")) {
					log.info("쿠키 이름 : "+cookies[i].getName());
					viewCookie=cookies[i];
				}	
			}
		} else {
			
		}
		model.addAttribute("board", fileboardService.getPostDetailNoHits(no));
		return "fileboard/get";
	}

	@GetMapping("insert.do")
	public String insBoard(Model model) {
		return "fileboard/insert";
	}
	
	@PostMapping("insertPro.do")
	public String insBoardPro(@RequestParam("title") String title,
            @RequestParam("content") String content,
            @RequestParam("file") MultipartFile file, Model model) {

		String author = (String) session.getAttribute("sid");
        String fileRealName = file.getOriginalFilename();
        long size = file.getSize();
        
        log.info("제목: {}", title);
        log.info("내용: {}", content);
        log.info("파일명: {}", fileRealName);
        log.info("파일 크기(byte): {}", size);
        
        // 서버에 저장할 파일 이름 생성
        String fileExtension = fileRealName.substring(fileRealName.lastIndexOf("."));
        String uploadFolder = servletContext.getRealPath("/resources/upload");

        UUID uuid = UUID.randomUUID();
        String uniqueName = uuid.toString().split("-")[0];
        String uuidName = uploadFolder + "\\" + uniqueName + fileExtension;
        
        // 파일 저장
        File saveFile = new File(uuidName);
        try {
            file.transferTo(saveFile);
        } catch (IllegalStateException | IOException e) {
            e.printStackTrace();
        }
        
        //도메인(DTO)에 추가
        Fileboard fileboard = new Fileboard();
        fileboard.setTitle(title);
        fileboard.setContent(content);
        model.addAttribute("fileRealName", fileRealName);
        model.addAttribute("size", size);
        fileboard.setAuthor(author);
        fileboard.setUrl(uniqueName+fileExtension);
		
        /* 서비스 호출 영역 시작 */
        fileboardService.write(fileboard);
        /* 서비스 호출 영역 끝 */

		return "redirect:list.do?pageNo=1";
	}

	@GetMapping("update.do")
	public String upBoard(@RequestParam("no") int no, Model model) {
		model.addAttribute("board", fileboardService.getPostDetailNoHits(no));
		return "fileboard/edit";
	}
	
	@PostMapping("updatePro.do")
	public String upBoardPro(@RequestParam("no") int no, 
			@RequestParam("title") String title,
            @RequestParam("content") String content,
            @RequestParam("file") MultipartFile file, Model model) {
		
		String author = (String) session.getAttribute("sid");
        String fileRealName = file.getOriginalFilename();
        long size = file.getSize();
        
        log.info("번호: {}", no);
        log.info("제목: {}", title);
        log.info("내용: {}", content);
        log.info("파일명: {}", fileRealName);
        log.info("파일 크기(byte): {}", size);
        
        // 서버에 저장할 파일 이름 생성
        String fileExtension = fileRealName.substring(fileRealName.lastIndexOf("."));
        String uploadFolder = servletContext.getRealPath("/resources/upload");

        UUID uuid = UUID.randomUUID();
        String uniqueName = uuid.toString().split("-")[0];
        String uuidName = uploadFolder + "\\" + uniqueName + fileExtension;
        
        // 파일 저장
        File saveFile = new File(uuidName);
        try {
            file.transferTo(saveFile);
        } catch (IllegalStateException | IOException e) {
            e.printStackTrace();
        }
        
        // 데이터 모델에 추가
        Fileboard fileboard = new Fileboard();
        fileboard.setNo(no);
        fileboard.setTitle(title);
        fileboard.setContent(content);
        model.addAttribute("fileRealName", fileRealName);
        model.addAttribute("size", size);
        fileboard.setAuthor(author);
        fileboard.setUrl(uniqueName+fileExtension);
		
		fileboardService.updatePost(fileboard);
		return "redirect:list.do?pageNo=1";
	}
	
	@RequestMapping("delBoard.do")
	public String delBoard(@RequestParam("no") int no, Model model) {
		fileboardService.deletePost(no);
		return "redirect:list.do?pageNo=1";
	}
}
